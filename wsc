  sudo apt update && sudo apt upgrade -y
  date
  timedatectl set-timezone "Asia/Kolkata"


  sudo adduser wsc
  sudo usermod -aG sudo wsc
  su - wsc  

  sudo apt install git -y

  sudo apt install python3-dev python3-venv -y

  sudo apt install python3-setuptools python3-pip -y

  sudo apt install software-properties-common -y

  sudo apt install mariadb-server -y

  sudo mysql_secure_installation

        Enter current password for root (enter for none):   (safely press Enter)
        Switch to unix_socket authentication [Y/n]          (Press "Y")
        Change the root password? [Y/n]                     (Press "Y")
        New password:                                       ("Enter new Password")
        Re-enter new password:                              ("Re-enter new Password")
        Remove anonymous users? [Y/n]                       (Press "Y")
        Disallow root login remotely? [Y/n]                 (Press "Y") //If Press "N" then You want to access the database from a remote server for using business analytics software like Metabase / PowerBI / Tableau, etc.
        Remove test database and access to it? [Y/n]        (Press "Y")
        Reload privilege tables now? [Y/n]                  (Press "Y")

  sudo apt install libmysqlclient-dev -y

  sudo nano /etc/mysql/mariadb.conf.d/50-server.cnf

Once the file opens you need to locate the line where collation-server says general and you need to modify it to Unicode as below,

    collation-server = utf8mb4_general_ci

Modify above as below.

    collation-server = utf8mb4_unicode_ci

Now press (Ctrl-X) and Save then exit.

And also locate my.cnf and edit the below configuration.

    sudo nano /etc/mysql/my.cnf

Make sure your configuration has the below lines in the file.

    [mysqld]
    character-set-client-handshake = FALSE
    character-set-server = utf8mb4
    collation-server = utf8mb4_unicode_ci

    [mysql]
    default-character-set = utf8mb4

Now press (Ctrl-X) and Save then exit.

    sudo service mysql restart
    
    sudo apt install redis-server -y
    
    sudo apt install curl
    curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/master/install.sh | bash
    source ~/.profile
    nvm install v16
    
    node -v
    
    sudo apt install npm -y
    sudo npm install -g yarn
    
    sudo apt install xvfb libfontconfig wkhtmltopdf -y
   
    sudo apt -y install nginx
    
    sudo -H pip3 install frappe-bench
    
    bench --version
    
    bench init frappe-bench --verbose --frappe-branch version-14
    
    cd frappe-bench/
    
    bench version
    
    sudo nano /etc/redis/redis.conf
    sudo service redis-server restart
    
    bench new-site <sitename> --db-name <dbname>
    
    bench get-app payments --branch version-14
    
    bench get-app erpnext --branch version-14
                  
    bench --site erp.com install-app erpnext

    bench use sitename
    
    bench start 
    
    /etc/default/locale
    sudo update-locale LANG=en_US.UTF-8 LC_CTYPE=en_US.UTF-8
    
    sudo bench setup production wsc
    
    bench restart
    
    
    sudo groupadd wscgroup
    sudo usermod -aG wscgroup www-data
    sudo chgrp wscgroup /home/wsc
    sudo chmod g+x /home/wsc
    bench --site all clear-cache
    sudo service nginx restart
    
    
    
    
    
    
    bench get-app https://github.com/frappe/hrms.git --branch version-14
    bench --site <site name> install-app hrms

    bench get-app https://github.com/frappe/education.git
    bench --site <site name> install-app education
    git fetch upstream --unshallow
    git checkout 0088bc496afc9f1fbb4903ac18562a8e0327a11a


    sudo ./env/bin/pip install numpy
    sudo ./env/bin/pip install pandas
    bench migrate
    bench restart


    bench get-app https://github.com/EduLeadERP/WSC.git
    bench --site <site name> install-app wsc

 
   
 
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    // Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
// MIT License. See license.txt

frappe.breadcrumbs = {
	all: {},

	preferred: {
		File: "",
		Dashboard: "Customization",
		"Dashboard Chart": "Customization",
		"Dashboard Chart Source": "Customization",
	},

	module_map: {
		Core: "Settings",
		Email: "Settings",
		Custom: "Settings",
		Workflow: "Settings",
		Printing: "Settings",
		Setup: "Settings",
		"Event Streaming": "Tools",
		Automation: "Tools",
	},

	set_doctype_module(doctype, module) {
		localStorage["preferred_breadcrumbs:" + doctype] = module;
	},

	get_doctype_module(doctype) {
		return localStorage["preferred_breadcrumbs:" + doctype];
	},

	add(module, doctype, type) {
		let obj;
		if (typeof module === "object") {
			obj = module;
		} else {
			obj = {
				module: module,
				doctype: doctype,
				type: type,
			};
		}
		this.all[frappe.breadcrumbs.current_page()] = obj;
		this.update();
	},

	current_page() {
		return frappe.get_route_str();
	},

	update() {
		var breadcrumbs = this.all[frappe.breadcrumbs.current_page()];

		this.clear();
		if (!breadcrumbs) return this.toggle(false);
		if (breadcrumbs.type === "Custom") {
			this.set_custom_breadcrumbs(breadcrumbs);
		} else {
			// workspace
			this.set_workspace_breadcrumb(breadcrumbs);

			// form / print
			let view = frappe.get_route()[0];
			view = view ? view.toLowerCase() : null;
			if (breadcrumbs.doctype && ["print", "form"].includes(view)) {
				this.set_list_breadcrumb(breadcrumbs);
				this.set_form_breadcrumb(breadcrumbs, view);
			} else if (breadcrumbs.doctype && view === "list") {
				this.set_list_breadcrumb(breadcrumbs);
			} else if (breadcrumbs.doctype && view == "dashboard-view") {
				this.set_list_breadcrumb(breadcrumbs);
				this.set_dashboard_breadcrumb(breadcrumbs);
			}
		}

		this.toggle(true);
	},

	set_custom_breadcrumbs(breadcrumbs) {
		const html = `<li><a href="${breadcrumbs.route}">${breadcrumbs.label}</a></li>`;
		this.$breadcrumbs.append(html);
	},

	get last_route() {
		return frappe.route_history.slice(-2)[0];
	},

	set_workspace_breadcrumb(breadcrumbs) {
		// get preferred module for breadcrumbs, based on history and module

		if (!breadcrumbs.workspace) {
			this.set_workspace(breadcrumbs);
		}
		if (!breadcrumbs.workspace) {
			return;
		}

		// if (
		// 	breadcrumbs.module_info &&
		// 	(breadcrumbs.module_info.blocked ||
		// 		!frappe.visible_modules.includes(breadcrumbs.module_info.module))
		// ) {
		// 	return;
		// }

		// $(
		// 	`<li><a href="/app/${frappe.router.slug(breadcrumbs.workspace)}">${__(
		// 		breadcrumbs.workspace
		// 	)}</a></li>`
		// ).appendTo(this.$breadcrumbs);
	},

	set_workspace(breadcrumbs) {
		// try and get module from doctype or other settings
		// then get the workspace for that module

		this.setup_modules();
		var from_module = this.get_doctype_module(breadcrumbs.doctype);

		if (from_module) {
			breadcrumbs.module = from_module;
		} else if (this.preferred[breadcrumbs.doctype] !== undefined) {
			// get preferred module for breadcrumbs
			breadcrumbs.module = this.preferred[breadcrumbs.doctype];
		}

		// guess from last route
		if (this.last_route?.[0] == "Workspaces") {
			let last_workspace = this.last_route[1];

			if (
				breadcrumbs.module &&
				frappe.boot.module_wise_workspaces[breadcrumbs.module]?.includes(last_workspace)
			) {
				breadcrumbs.workspace = last_workspace;
				return;
			}
		}

		if (breadcrumbs.module) {
			if (this.module_map[breadcrumbs.module]) {
				breadcrumbs.module = this.module_map[breadcrumbs.module];
			}

			breadcrumbs.module_info = frappe.get_module(breadcrumbs.module);

			// set workspace
			if (
				breadcrumbs.module_info &&
				frappe.boot.module_wise_workspaces[breadcrumbs.module]
			) {
				breadcrumbs.workspace = frappe.boot.module_wise_workspaces[breadcrumbs.module][0];
			}
		}
	},

	set_list_breadcrumb(breadcrumbs) {
		const doctype = breadcrumbs.doctype;
		const doctype_meta = frappe.get_doc("DocType", doctype);
		if (
			(doctype === "User" && !frappe.user.has_role("System Manager")) ||
			doctype_meta?.issingle
		) {
			// no user listview for non-system managers and single doctypes
		} else {
			let route;
			const doctype_route = frappe.router.slug(frappe.router.doctype_layout || doctype);
			if (doctype_meta?.is_tree) {
				let view = frappe.model.user_settings[doctype].last_view || "Tree";
				route = `${doctype_route}/view/${view}`;
			} else {
				route = doctype_route;
			}
			$(`<li><a href="/app/${route}">${__(doctype)}</a></li>`).appendTo(this.$breadcrumbs);
		}
	},

	set_form_breadcrumb(breadcrumbs, view) {
		const doctype = breadcrumbs.doctype;
		const docname = frappe.get_route().slice(2).join("/");
		let form_route = `/app/${frappe.router.slug(doctype)}/${docname}`;
		if (frappe.model.is_single(doctype)){
		$(`<li><a href="${form_route}">${__(docname)}</a></li>`).appendTo(this.$breadcrumbs);
		}
		else{
			$(`<li><a href="${form_route}">${docname.replace(frappe.router.slug(doctype),frappe.router.slug(__(doctype)))}</a></li>`)
			.appendTo(this.$breadcrumbs);
		}

		if (view === "form") {
			let last_crumb = this.$breadcrumbs.find("li").last();
			last_crumb.addClass("disabled");
			last_crumb.css("cursor", "copy");
			last_crumb.click((event) => {
				event.stopImmediatePropagation();
				frappe.utils.copy_to_clipboard(last_crumb.text());
			});
		}
	},

	set_dashboard_breadcrumb(breadcrumbs) {
		const doctype = breadcrumbs.doctype;
		const docname = frappe.get_route()[1];
		let dashboard_route = `/app/${frappe.router.slug(doctype)}/${docname}`;
		$(`<li><a href="${dashboard_route}">${__(docname)}</a></li>`).appendTo(this.$breadcrumbs);
	},

	setup_modules() {
		if (!frappe.visible_modules) {
			frappe.visible_modules = $.map(frappe.boot.allowed_workspaces, (m) => {
				return m.module;
			});
		}
	},

	rename(doctype, old_name, new_name) {
		var old_route_str = ["Form", doctype, old_name].join("/");
		var new_route_str = ["Form", doctype, new_name].join("/");
		this.all[new_route_str] = this.all[old_route_str];
		delete frappe.breadcrumbs.all[old_route_str];
		this.update();
	},

	clear() {
		this.$breadcrumbs = $("#navbar-breadcrumbs").empty();
	},

	toggle(show) {
		if (show) {
			$("body").addClass("no-breadcrumbs");
		} else {
			$("body").removeClass("no-breadcrumbs");
		}
	},
};
    
    
    
    
   
   bench build --apps wsc
    
    
    
    
    
    
    
    
    

    
    
   
   
    Before SSL setup (Setup Multitenancy )
    Switch on DNS based multitenancy (once)
    bench config dns_multitenant on
    Re generate nginx config
    bench setup nginx
    Reload nginx
    sudo service nginx reload
    
    
    
    
    
    sudo apt-get install software-properties-common

    sudo snap install core; sudo snap refresh core

    sudo apt-get update

    sudo snap install --classic certbot

    sudo apt-get install python3-certbot-nginx

    sudo -H bench setup lets-encrypt sandboxwsc.eduleadonline.com

    bench restart
